
import java.io.FileReader;
import javax.json.Json;
import javax.json.stream.JsonParser;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.charset.StandardCharsets;
import java.util.Iterator;
import java.util.Map;
import java.io.*;
import java.util.ArrayList;
import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.Scanner;
/**
 * 
 * The Example1 Service Layer Implementation is based a design pattern which
 * aims to organize the functionality of the application into logical units that
 * are typically layered on top of much of the low level functionality of the
 * application. This organization helps support service oriented architectures.
 *
 */
public class SetToJsonORService implements setService{

	ItemsDao dao2;
	CustomersDao dao;
	
	static Integer ItemStockAmount = 0;
	static String Customer;
	static String Items;
	Scanner in = new Scanner(System.in);
	static Long ItemID = 30L;
	
	/**
	 * Default Constructor creates a default CItemDao object
	 */
	public SetToJsonORService() {
		this.dao = new CustomersDao();
	}
	public static String setCust(Scanner sc) {
		System.out.flush();
	
	      System.out.println("Enter Customer");
	      Customer = sc.next();
	     
	    return Customer;
	}
	/**
	 * Constructor with the DAO provided
	 * 
	 * @param dao
	 *            Data Access Object to use in the service
	 */
	public SetToJsonORService(CustomersDao dao) {
		this.dao = dao;
	}

	/**
	 * Add a randomly generated CItem element to the repository
	 */
	public void addACustomer() 
	{
		Long ItemID = this.maxCItemId() + 1;
	
		Customer aCustomer = new Customer(ItemID, Customer);
		dao.add(aCustomer);
	}


	
	/**
	 * Calculate the maximum ID value of elements in the repository
	 * 
	 * @return the maximum id of a CItem in the repository
	 */
 	public Long maxCItemId() {
		List<Customer> clist = dao.list();
		Long max = 0L;
		if (clist.isEmpty())
			return max;
		else {
		Iterator<Customer> iter = clist.iterator();
   		 max = iter.next().getId();
   		 while (iter.hasNext())
   		 {
   			 Customer anItem = iter.next();
   			 if (anItem.getId() > max)
   			     max = anItem.getId();
   		 }
   		 return max;	
		}
	}



}




